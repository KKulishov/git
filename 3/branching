Создание новой ветки
git branch testing

git log --oneline --decorate
Легко увидеть, что ветки master и testing находятся непосредственно рядом
с коммитом  f30ab .

Смена веток
git checkout testing


вы
можете переходить из одной ветки в другую, а при необходимости объединять их
(рис. 3.9). И все это при помощи простых команд branch , checkout и commit .



log --oneline --decorate --graph --all
Суть происходящего демонстрирует и команда git log . В форме git log --oneline
--decorate –graph --all она выводит историю коммитов, показывая места рас-
положения указателей и точки расхождения.





Основы ветвления и слияния
Простые случаи ветвления и слияния мы рассмотрим на схемах, которые могут
пригодиться вам при решении реальных задач. Последовательность действий будет
следующей:
1.	 Выполняем некие действия на сайте.
2.	 Создаем ветку для новой истории, над которой тоже нужно работать.
3.	 В этой ветке тоже производим некие действия.
А теперь предположим, что нам позвонили и сообщили о важной проблеме, требу-
ющей срочного решения. Поступаем следующим образом:
4.	 Переключаемся в производственную ветку.
5.	 Создаем ветку для решения проблемы.
6.	 После тестирования выполняем слияние побочной ветки и отправляем ее
в разработку.
7.	 Возвращаемся к первоначальной задаче и продолжаем работу.


Вы решили приступить к работе над проблемой 53, фигурирующей в системе от-
слеживания ошибок вашей фирмы. Создать ветку и сразу перейти туда позволяет
команда git checkout с параметром -b (рис. 3.11):
$ git checkout -b iss53
Переход на новую ветку "iss53"
Это сокращенная запись для команд:
$ git branch iss53
$ git checkout iss53


$ vim index.html
$ git commit -a -m 'добавлен новый нижний колонтитул [проблема 53]'


На данный же момент предположим, что все изменения зафиксированы и ничто
не мешает вам вернуться в ветку master :
$ git checkout master
Switched to branch 'master
Теперь рабочая папка проекта вернулась в то состояние, в котором она пребывала
перед началом работы над проблемой 53


Итак, у вас есть ошибка, которую нужно исправить. Создадим ветку hotfix , с ко-
торой мы будем работать, пока не решим поставленную задачу (рис. 3.13):
$ git checkout -b hotfix


После того как проблема будет решена, вы сможете произвести тестирование,
убедиться, что найденное решение работает, и объединить ветку hotfix с веткой
master , чтобы внедрить внесенные изменения в готовый код. Эта операция вы-
полняется командой git merge :
$ git checkout master
$ git merge hotfix
Обратите внимание на словосочетание «fast-forward» в описании результатов
слияния. Так как подвергшаяся слиянию ветка указывала на коммит, являющийся
предком текущего коммита, система Git просто сдвинула указатель вперед.


После внедрения важного исправления можно вернуться к прерванной работе.
Но сначала следует удалить ветку hotfix , так как она нам больше не понадобит-
ся, — на этот коммит уже указывает ветка master . Для этого достаточно добавить
параметр  -d к команде git branch :
git branch -d hotfix
