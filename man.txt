git clone git@github.com:KKulishov/git.git

git config --global core.editor vim
иницилиазиация новго репозитория
git init

$ git add *.c
$ git add LICENSE
$ git commit -m 'первоначальная версия проекта'

$ git help <команда>
$ git <команда> --help
$ man git-<команда

проверка настроек
git config --list
git config user.name

git config --global core.editor vim

краткий отчет
git status -s или git status --short ,



можно исключать файлы и  да же по маске регулярных выражений
.gitignore
*.[oa]
*~
*.a
# пропускать файлы, заканчивающиеся на .a
!lib.a # но отслеживать файлы lib.a, несмотря на пропуск файлов на .a
/TODO # игнорировать только корневой файл TODO, а не файлы вида subdir/TODO
build/
# игнорировать все файлы в папке build/
doc/*.txt # игнорировать doc/notes.txt, но не doc/server/arch.txt

примеры
https://github.com/github/gitignore

Команда git diff без дополнительных параметров позволяет посмотреть, что было
изменено, но пока не проиндексировано
git diff

Эта команда сравнивает индексированные
изменения с содержимым последней зафиксированной версии
git diff --staged



А команда git diff --cached покажет проиндексированные изменения



парметры commit
git commit -m "Story 182: Fix benchmarks for speed"

удаление файлов из  под git
git rm --cached newfile
git rm log/\*.log
Обратите внимание на обратный слеш ( \ ) перед символом * . Он необходим по-
тому, что Git добавляет собственные расширения к расширениям имен файлов
оболочки. В такой форме команда удаляет все файлы с расширением .log из
папки   log/ .
Или вы можете написать:
$ git rm \*~
Эта команда удаляет все файлы, имена которых заканчиваются символом ~ .
